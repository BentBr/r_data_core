warning: unused import: `time::OffsetDateTime`
 --> src/services/entity_definition_service.rs:6:5
  |
6 | use time::OffsetDateTime;
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: use of deprecated function `base64::encode`: Use Engine::encode
   --> src/entity/admin_user/model.rs:340:17
    |
340 |         base64::encode(&bytes)
    |                 ^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: unused variable: `existing_user`
   --> src/api/admin/auth.rs:378:9
    |
378 |     let existing_user = match repo.find_by_username_or_email(&register_req.username).await {
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_existing_user`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `existing_email`
   --> src/api/admin/auth.rs:392:9
    |
392 |     let existing_email = match repo.find_by_username_or_email(&register_req.email).await {
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_existing_email`

warning: unused variable: `entity_type`
  --> src/api/public/queries/repository.rs:17:9
   |
17 |         entity_type: &str,
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity_type`

warning: unused variable: `query`
  --> src/api/public/queries/repository.rs:18:9
   |
18 |         query: &AdvancedEntityQuery,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: this function depends on never type fallback being `()`
  --> src/cache/redis.rs:18:5
   |
18 |     pub async fn new(redis_url: &str, default_ttl: u64) -> Result<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
  --> src/cache/redis.rs:29:14
   |
29 |             .query_async(&mut conn)
   |              ^^^^^^^^^^^
   = note: `#[warn(dependency_on_unit_never_type_fallback)]` on by default
help: use `()` annotations to avoid fallback changes
   |
29 |             .query_async::<_, ()>(&mut conn)
   |                         +++++++++

warning: unused variable: `uuid`
   --> src/db/repository.rs:299:45
    |
299 |     async fn create_version_snapshot(&self, uuid: &Uuid, _entity: &T) -> Result<()> {
    |                                             ^^^^ help: if this is intentional, prefix it with an underscore: `_uuid`

warning: unused variable: `entity_def`
  --> src/entity/dynamic_entity/repository.rs:28:13
   |
28 |         let entity_def = sqlx::query("SELECT * FROM entity_definitions WHERE entity_type = $1")
   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity_def`

warning: unused variable: `entity_def`
   --> src/entity/dynamic_entity/repository.rs:227:13
    |
227 |         let entity_def = sqlx::query("SELECT * FROM entity_definitions WHERE entity_type = $1")
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity_def`

warning: this function depends on never type fallback being `()`
  --> src/cache/redis.rs:47:1
   |
47 | #[async_trait]
   | ^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
  --> src/cache/redis.rs:83:14
   |
83 |         conn.set_ex(key, serialized, ttl)
   |              ^^^^^^
help: use `()` annotations to avoid fallback changes
   |
83 |         conn.set_ex::<_, _, ()>(key, serialized, ttl)
   |                    ++++++++++++

warning: this function depends on never type fallback being `()`
  --> src/cache/redis.rs:47:1
   |
47 | #[async_trait]
   | ^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
  --> src/cache/redis.rs:93:14
   |
93 |         conn.del(key)
   |              ^^^
help: use `()` annotations to avoid fallback changes
   |
93 |         conn.del::<_, ()>(key)
   |                 +++++++++

warning: this function depends on never type fallback being `()`
   --> src/cache/redis.rs:47:1
    |
47  | #[async_trait]
    | ^^^^^^^^^^^^^^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> src/cache/redis.rs:104:14
    |
104 |             .query_async(&mut conn)
    |              ^^^^^^^^^^^
help: use `()` annotations to avoid fallback changes
    |
104 |             .query_async::<_, ()>(&mut conn)
    |                         +++++++++

warning: unused variable: `role`
  --> src/entity/admin_user/repository.rs:92:9
   |
92 |         role: Option<&'a str>,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_role`

warning: unused variable: `field_def`
   --> src/entity/dynamic_entity/validator.rs:498:22
    |
498 |     fn validate_json(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_field_def`

warning: unused variable: `value`
   --> src/entity/dynamic_entity/validator.rs:498:51
    |
498 |     fn validate_json(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |                                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: function `validate_email` is never used
  --> src/api/admin/auth.rs:53:4
   |
53 | fn validate_email(email: &str) -> Result<(), ValidationError> {
   |    ^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `get_auth_info` is never used
   --> src/api/admin/auth.rs:103:4
    |
103 | fn get_auth_info(req: &HttpRequest) -> (bool, Uuid) {
    |    ^^^^^^^^^^^^^

warning: fields `user_uuid` and `api_key_uuid` are never read
  --> src/api/middleware/api_auth.rs:18:9
   |
17 | pub struct ApiKeyClaims {
   |            ------------ fields in this struct
18 |     pub user_uuid: i64,
   |         ^^^^^^^^^
19 |     pub api_key_uuid: i64,
   |         ^^^^^^^^^^^^
   |
   = note: `ApiKeyClaims` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `db_pool` is never read
 --> src/api/public/queries/repository.rs:7:5
  |
6 | pub struct QueryRepository {
  |            --------------- field in this struct
7 |     db_pool: PgPool,
  |     ^^^^^^^

warning: multiple associated items are never used
   --> src/entity/notification.rs:123:12
    |
121 | impl Notification {
    | ----------------- associated items in this implementation
122 |     /// Create a new notification
123 |     pub fn new(notification_type: NotificationType, subject: String, body: String) -> Self {
    |            ^^^
...
146 |     pub fn with_recipient_uuid(mut self, recipient_uuid: Uuid) -> Self {
    |            ^^^^^^^^^^^^^^^^^^^
...
152 |     pub fn with_recipient_email(mut self, email: String) -> Self {
    |            ^^^^^^^^^^^^^^^^^^^^
...
158 |     pub fn with_priority(mut self, priority: NotificationPriority) -> Self {
    |            ^^^^^^^^^^^^^
...
164 |     pub fn schedule_for(mut self, time: OffsetDateTime) -> Self {
    |            ^^^^^^^^^^^^
...
170 |     pub fn mark_as_sent(&mut self) {
    |            ^^^^^^^^^^^^
...
176 |     pub fn mark_as_read(&mut self) {
    |            ^^^^^^^^^^^^
...
182 |     pub fn mark_as_failed(&mut self, error: &str) {
    |            ^^^^^^^^^^^^^^
...
189 |     pub fn is_ready_to_send(&self) -> bool {
    |            ^^^^^^^^^^^^^^^^
...
202 |     pub fn validate(&self) -> Result<()> {
    |            ^^^^^^^^

warning: associated items `new`, `add_permission`, `remove_permission`, `has_permission`, `get_role_permissions`, and `create_admin_scheme` are never used
   --> src/entity/permission_scheme.rs:95:12
    |
93  | impl PermissionScheme {
    | --------------------- associated items in this implementation
94  |     /// Create a new permission scheme
95  |     pub fn new(name: String) -> Self {
    |            ^^^
...
106 |     pub fn add_permission(&mut self, role: &str, permission: Permission) -> Result<()> {
    |            ^^^^^^^^^^^^^^
...
130 |     pub fn remove_permission(
    |            ^^^^^^^^^^^^^^^^^
...
167 |     pub fn has_permission(
    |            ^^^^^^^^^^^^^^
...
183 |     pub fn get_role_permissions(&self, role: &str) -> Option<&Vec<Permission>> {
    |            ^^^^^^^^^^^^^^^^^^^^
...
188 |     pub fn create_admin_scheme() -> Self {
    |            ^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `add_step`, `get_step`, `remove_step`, and `validate` are never used
   --> src/entity/workflow.rs:204:12
    |
202 | impl WorkflowEntity {
    | ------------------- associated items in this implementation
203 |     /// Create a new workflow
204 |     pub fn new(name: String, trigger: TriggerType) -> Self {
    |            ^^^
...
220 |     pub fn add_step(&mut self, step: WorkflowStep) -> Result<()> {
    |            ^^^^^^^^
...
244 |     pub fn get_step(&self, uuid: Uuid) -> Option<&WorkflowStep> {
    |            ^^^^^^^^
...
249 |     pub fn remove_step(&mut self, uuid: Uuid) -> Result<()> {
    |            ^^^^^^^^^^^
...
275 |     pub fn validate(&self) -> Result<()> {
    |            ^^^^^^^^

warning: struct `DynamicEntityRepository` is never constructed
  --> src/entity/dynamic_entity/repository.rs:14:12
   |
14 | pub struct DynamicEntityRepository {
   |            ^^^^^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `create`, `update`, `get_by_type`, and `delete_by_type` are never used
   --> src/entity/dynamic_entity/repository.rs:21:12
    |
19  | impl DynamicEntityRepository {
    | ---------------------------- associated items in this implementation
20  |     /// Create a new repository instance
21  |     pub fn new(pool: PgPool) -> Self {
    |            ^^^
...
26  |     pub async fn create(&self, entity: &DynamicEntity) -> Result<()> {
    |                  ^^^^^^
...
225 |     pub async fn update(&self, entity: &DynamicEntity) -> Result<()> {
    |                  ^^^^^^
...
395 |     pub async fn get_by_type(&self, entity_type: &str) -> Result<Option<DynamicEntity>> {
    |                  ^^^^^^^^^^^
...
472 |     pub async fn delete_by_type(&self, entity_type: &str) -> Result<()> {
    |                  ^^^^^^^^^^^^^^

warning: struct `DynamicEntityValidator` is never constructed
  --> src/entity/dynamic_entity/validator.rs:11:12
   |
11 | pub struct DynamicEntityValidator;
   |            ^^^^^^^^^^^^^^^^^^^^^^

warning: multiple associated functions are never used
   --> src/entity/dynamic_entity/validator.rs:15:12
    |
13  | impl DynamicEntityValidator {
    | --------------------------- associated functions in this implementation
14  |     /// Validate a field against its definition
15  |     pub fn validate_field(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |            ^^^^^^^^^^^^^^
...
53  |     fn validate_string(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^
...
106 |     fn validate_integer(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^^
...
163 |     fn validate_float(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^
...
216 |     fn validate_boolean(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^^
...
244 |     fn validate_array(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^
...
255 |     fn validate_object(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^
...
266 |     fn validate_date(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^
...
334 |     fn validate_datetime(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^^^
...
404 |     fn validate_uuid(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^
...
423 |     fn validate_select(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^
...
454 |     fn validate_multi_select(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^
...
498 |     fn validate_json(field_def: &FieldDefinition, value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^

warning: function `validate_field` is never used
   --> src/entity/dynamic_entity/validator.rs:505:8
    |
505 | pub fn validate_field(field_def: &Value, value: &Value, field_name: &str) -> Result<()> {
    |        ^^^^^^^^^^^^^^

warning: function `validate_entity` is never used
   --> src/entity/dynamic_entity/validator.rs:561:8
    |
561 | pub fn validate_entity(entity: &Value, entity_def: &EntityDefinition) -> Result<()> {
    |        ^^^^^^^^^^^^^^^

warning: method `handle_constraint` is never used
   --> src/entity/field/definition.rs:541:8
    |
166 | impl FieldDefinition {
    | -------------------- method in this implementation
...
541 |     fn handle_constraint(&self, constraint_type: &str, constraint_value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^^^

warning: function `handle_constraint` is never used
   --> src/entity/field/definition.rs:607:4
    |
607 | fn handle_constraint(
    |    ^^^^^^^^^^^^^^^^^

warning: function `validate_number_constraint` is never used
   --> src/entity/field/definition.rs:713:4
    |
713 | fn validate_number_constraint(constraint_value: &Value) -> Result<()> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `validate_string_constraint` is never used
   --> src/entity/field/definition.rs:728:4
    |
728 | fn validate_string_constraint(constraint_value: &Value) -> Result<()> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `validate_boolean_constraint` is never used
   --> src/entity/field/definition.rs:740:4
    |
740 | fn validate_boolean_constraint(constraint_value: &Value) -> Result<()> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `validate_array_constraint` is never used
   --> src/entity/field/definition.rs:756:4
    |
756 | fn validate_array_constraint(constraint_value: &Value) -> Result<()> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `validate_object_constraint` is never used
   --> src/entity/field/definition.rs:768:4
    |
768 | fn validate_object_constraint(constraint_value: &Value) -> Result<()> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `r_data_core` (lib) generated 36 warnings (run `cargo fix --lib -p r_data_core` to apply 5 suggestions)
warning: unused imports: `DESCRIPTION`, `NAME`, and `VERSION`
 --> src/main.rs:9:19
  |
9 | use r_data_core::{DESCRIPTION, NAME, VERSION};
  |                   ^^^^^^^^^^^  ^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `routes::register_routes`
 --> src/api/admin/api_keys/mod.rs:3:9
  |
3 | pub use routes::register_routes;
  |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `routes::register_routes`
 --> src/api/admin/permissions/mod.rs:3:9
  |
3 | pub use routes::register_routes;
  |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `routes::register_routes`
 --> src/api/admin/system/mod.rs:3:9
  |
3 | pub use routes::register_routes;
  |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `routes::register_routes`
 --> src/api/admin/workflows/mod.rs:3:9
  |
3 | pub use routes::register_routes;
  |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `api_auth::ApiAuth`
 --> src/api/middleware/mod.rs:7:9
  |
7 | pub use api_auth::ApiAuth;
  |         ^^^^^^^^^^^^^^^^^

warning: unused imports: `AuthMethod` and `CombinedAuth`
 --> src/api/middleware/mod.rs:9:37
  |
9 | pub use combined_auth::{ApiKeyInfo, AuthMethod, CombinedAuth};
  |                                     ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `AppErrorHandlers` and `handle_middleware_panic`
  --> src/api/middleware/mod.rs:10:49
   |
10 | pub use error_handlers::{create_error_handlers, handle_middleware_panic, AppErrorHandlers};
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `Status`
  --> src/api/mod.rs:15:45
   |
15 | pub use crate::api::response::{ApiResponse, Status};
   |                                             ^^^^^^

warning: unused import: `UserStatus`
 --> src/entity/admin_user/mod.rs:5:46
  |
5 | pub use model::{AdminUser, ApiKey, UserRole, UserStatus};
  |                                              ^^^^^^^^^^

warning: unused imports: `AdminUserRepository` and `ApiKeyRepository`
 --> src/entity/admin_user/mod.rs:6:22
  |
6 | pub use repository::{AdminUserRepository, ApiKeyRepository};
  |                      ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused imports: `AdminUserRepositoryTrait`, `ApiKeyRepositoryTrait`, and `is_key_valid`
 --> src/entity/admin_user/mod.rs:7:28
  |
7 | pub use repository_trait::{is_key_valid, AdminUserRepositoryTrait, ApiKeyRepositoryTrait};
  |                            ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `repository_trait::EntityDefinitionRepositoryTrait`
 --> src/entity/class/mod.rs:6:9
  |
6 | pub use repository_trait::EntityDefinitionRepositoryTrait;
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: field `cache_manager` is never read
  --> src/api/mod.rs:27:9
   |
19 | pub struct ApiState {
   |            -------- field in this struct
...
27 |     pub cache_manager: Arc<CacheManager>,
   |         ^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field `enable_auth` is never read
  --> src/api/mod.rs:43:9
   |
42 | pub struct ApiConfiguration {
   |            ---------------- field in this struct
43 |     pub enable_auth: bool,
   |         ^^^^^^^^^^^

warning: function `validate_email` is never used
  --> src/api/admin/auth.rs:53:4
   |
53 | fn validate_email(email: &str) -> Result<(), ValidationError> {
   |    ^^^^^^^^^^^^^^

warning: function `register_routes` is never used
 --> src/api/admin/entity_definitions/mod.rs:7:8
  |
7 | pub fn register_routes(cfg: &mut web::ServiceConfig) {
  |        ^^^^^^^^^^^^^^^

warning: fields `jwt_claims` and `api_key_info` are never read
  --> src/api/auth/auth_enum.rs:26:9
   |
25 | pub struct CombinedRequiredAuth {
   |            -------------------- fields in this struct
26 |     pub jwt_claims: Option<AuthUserClaims>,
   |         ^^^^^^^^^^
27 |     pub api_key_info: Option<ApiKeyInfo>,
   |         ^^^^^^^^^^^^

warning: function `authenticate_api_key` is never used
   --> src/api/auth/utils.rs:217:14
    |
217 | pub async fn authenticate_api_key(api_key: &str, pool: &PgPool) -> Result<Uuid> {
    |              ^^^^^^^^^^^^^^^^^^^^

warning: struct `AdminOnly` is never constructed
  --> src/api/jwt.rs:75:12
   |
75 | pub struct AdminOnly(pub AuthUserClaims);
   |            ^^^^^^^^^

warning: method `get_state` is never used
  --> src/api/middleware/base_auth.rs:19:8
   |
12 | pub trait AuthMiddlewareService<S, B>
   |           --------------------- method in this trait
...
19 |     fn get_state(&self, req: &ServiceRequest) -> Result<web::Data<ApiState>, Error> {
   |        ^^^^^^^^^

warning: fields `uuid`, `user_uuid`, `name`, `created_at`, and `expires_at` are never read
   --> src/api/middleware/combined_auth.rs:192:9
    |
191 | pub struct ApiKeyInfo {
    |            ---------- fields in this struct
192 |     pub uuid: Uuid,
    |         ^^^^
193 |     pub user_uuid: Uuid,
    |         ^^^^^^^^^
194 |     pub name: String,
    |         ^^^^
195 |     pub created_at: OffsetDateTime,
    |         ^^^^^^^^^^
196 |     pub expires_at: Option<OffsetDateTime>,
    |         ^^^^^^^^^^
    |
    = note: `ApiKeyInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: function `handle_middleware_panic` is never used
  --> src/api/middleware/error_handlers.rs:73:8
   |
73 | pub fn handle_middleware_panic(err: &actix_web::Error) -> HttpResponse {
   |        ^^^^^^^^^^^^^^^^^^^^^^^

warning: fields `filter`, `limit`, `offset`, `sort_by`, and `sort_direction` are never read
  --> src/api/public/entities/models.rs:20:9
   |
19 | pub struct EntityQuery {
   |            ----------- fields in this struct
20 |     pub filter: Option<HashMap<String, Value>>,
   |         ^^^^^^
21 |     pub limit: Option<i64>,
   |         ^^^^^
22 |     pub offset: Option<i64>,
   |         ^^^^^^
23 |     pub sort_by: Option<String>,
   |         ^^^^^^^
24 |     pub sort_direction: Option<String>,
   |         ^^^^^^^^^^^^^^
   |
   = note: `EntityQuery` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: function `convert_value` is never used
  --> src/api/public/entities/models.rs:28:8
   |
28 | pub fn convert_value(value: &serde_json::Value) -> serde_json::Value {
   |        ^^^^^^^^^^^^^

warning: methods `create_entity` and `update_entity` are never used
   --> src/api/public/entities/repository.rs:139:18
    |
17  | impl EntityRepository {
    | --------------------- methods in this implementation
...
139 |     pub async fn create_entity(
    |                  ^^^^^^^^^^^^^
...
305 |     pub async fn update_entity(
    |                  ^^^^^^^^^^^^^

warning: multiple fields are never read
  --> src/api/public/queries/models.rs:9:9
   |
8  | pub struct AdvancedEntityQuery {
   |            ------------------- fields in this struct
9  |     pub filter: Option<HashMap<String, Value>>,
   |         ^^^^^^
10 |     pub limit: Option<i64>,
   |         ^^^^^
11 |     pub offset: Option<i64>,
   |         ^^^^^^
12 |     pub sort_by: Option<String>,
   |         ^^^^^^^
13 |     pub sort_direction: Option<String>,
   |         ^^^^^^^^^^^^^^
14 |     pub include_related: Option<bool>,
   |         ^^^^^^^^^^^^^^^
15 |     pub fields: Option<Vec<String>>,
   |         ^^^^^^
   |
   = note: `AdvancedEntityQuery` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: associated functions `success_with_message`, `ok_with_message`, and `created` are never used
  --> src/api/response.rs:33:12
   |
21 | / impl<T> ApiResponse<T>
22 | | where
23 | |     T: Serialize,
   | |_________________- associated functions in this implementation
...
33 |       pub fn success_with_message(data: T, message: &str) -> Self {
   |              ^^^^^^^^^^^^^^^^^^^^
...
59 |       pub fn ok_with_message(data: T, message: &str) -> HttpResponse {
   |              ^^^^^^^^^^^^^^^
...
65 |       pub fn created<D: Serialize>(data: D) -> HttpResponse {
   |              ^^^^^^^

warning: multiple variants are never constructed
   --> src/api/response.rs:163:5
    |
162 | pub enum ApiError {
    |          -------- variants in this enum
163 |     NotFound(String),
    |     ^^^^^^^^
164 |     InternalError(String),
    |     ^^^^^^^^^^^^^
165 |     BadRequest(String),
    |     ^^^^^^^^^^
166 |     Unauthorized(String),
    |     ^^^^^^^^^^^^
167 |     Forbidden(String),
    |     ^^^^^^^^^
168 |     Inactive(String),
    |     ^^^^^^^^
169 |     UnprocessableEntity(String),
    |     ^^^^^^^^^^^^^^^^^^^
    |
    = note: `ApiError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: methods `get`, `set`, `delete`, and `clear` are never used
  --> src/cache/mod.rs:19:14
   |
17 | pub trait CacheBackend: Send + Sync {
   |           ------------ methods in this trait
18 |     /// Get a value from the cache
19 |     async fn get<T: DeserializeOwned + Send + Sync>(&self, key: &str) -> Result<Option<T>>;
   |              ^^^
...
22 |     async fn set<T: Serialize + Send + Sync>(
   |              ^^^
...
30 |     async fn delete(&self, key: &str) -> Result<()>;
   |              ^^^^^^
...
33 |     async fn clear(&self) -> Result<()>;
   |              ^^^^^

warning: field `in_memory` is never read
  --> src/cache/mod.rs:39:5
   |
37 | pub struct CacheManager {
   |            ------------ field in this struct
38 |     config: CacheConfig,
39 |     in_memory: Arc<InMemoryCache>,
   |     ^^^^^^^^^

warning: methods `get`, `set`, `delete`, and `clear` are never used
   --> src/cache/mod.rs:69:18
    |
43  | impl CacheManager {
    | ----------------- methods in this implementation
...
69  |     pub async fn get<T: DeserializeOwned + Send + Sync>(&self, key: &str) -> Result<Option<T>> {
    |                  ^^^
...
91  |     pub async fn set<T: Serialize + Send + Sync>(
    |                  ^^^
...
116 |     pub async fn delete(&self, key: &str) -> Result<()> {
    |                  ^^^^^^
...
134 |     pub async fn clear(&self) -> Result<()> {
    |                  ^^^^^

warning: struct `Database` is never constructed
  --> src/db/mod.rs:11:12
   |
11 | pub struct Database {
   |            ^^^^^^^^

warning: associated items `new`, `check_connection`, `repository`, and `begin_transaction` are never used
  --> src/db/mod.rs:18:18
   |
16 | impl Database {
   | ------------- associated items in this implementation
17 |     /// Create a new database connection pool
18 |     pub async fn new(config: &DatabaseConfig) -> Result<Self> {
   |                  ^^^
...
30 |     pub async fn check_connection(&self) -> Result<()> {
   |                  ^^^^^^^^^^^^^^^^
...
40 |     pub fn repository<T>(&self, table_name: &str) -> repository::EntityRepository<T>
   |            ^^^^^^^^^^
...
54 |     pub async fn begin_transaction(&self) -> Result<sqlx::Transaction<'_, sqlx::Postgres>> {
   |                  ^^^^^^^^^^^^^^^^^

warning: method `repository` is never used
  --> src/db/repository.rs:12:8
   |
10 | pub trait PgPoolExtension {
   |           --------------- method in this trait
11 |     /// Get a repository for a specific entity type
12 |     fn repository<T>(&self) -> EntityRepository<T>
   |        ^^^^^^^^^^

warning: multiple methods are never used
   --> src/db/repository.rs:90:12
    |
70  | / impl<T> EntityRepository<T>
71  | | where
72  | |     T: Send
73  | |         + Sync
...   |
77  | |         + DeserializeOwned
78  | |         + 'static,
    | |__________________- methods in this implementation
...
90  |       pub fn get_pool(&self) -> &PgPool {
    |              ^^^^^^^^
...
95  |       pub async fn get_by_uuid(&self, uuid: &Uuid) -> Result<T> {
    |                    ^^^^^^^^^^^
...
142 |       pub async fn count(&self, filter: Option<&str>) -> Result<i64> {
    |                    ^^^^^
...
161 |       pub async fn create(&self, entity: &T) -> Result<Uuid> {
    |                    ^^^^^^
...
231 |       pub async fn update(&self, uuid: &Uuid, entity: &T) -> Result<()> {
    |                    ^^^^^^
...
286 |       pub async fn delete(&self, uuid: &Uuid) -> Result<()> {
    |                    ^^^^^^
...
299 |       async fn create_version_snapshot(&self, uuid: &Uuid, _entity: &T) -> Result<()> {
    |                ^^^^^^^^^^^^^^^^^^^^^^^
...
305 |       pub async fn get_version(&self, uuid: &Uuid, version: i32) -> Result<VersionedData> {
    |                    ^^^^^^^^^^^
...
317 |       pub async fn list_versions(&self, uuid: &Uuid) -> Result<Vec<VersionedData>> {
    |                    ^^^^^^^^^^^^^

warning: methods `get_field`, `set_field`, `get_all_fields`, and `validate` are never used
  --> src/entity/mod.rs:26:8
   |
25 | pub trait DynamicFields {
   |           ------------- methods in this trait
26 |     fn get_field(&self, name: &str) -> Option<serde_json::Value>;
   |        ^^^^^^^^^
27 |     fn set_field(&mut self, name: &str, value: serde_json::Value) -> Result<()>;
   |        ^^^^^^^^^
28 |     fn get_all_fields(&self) -> HashMap<String, serde_json::Value>;
   |        ^^^^^^^^^^^^^^
29 |     fn validate(&self, entity_def: &EntityDefinition) -> Result<()>;
   |        ^^^^^^^^

warning: methods `full_path`, `increment_version`, and `create_version_snapshot` are never used
  --> src/entity/abstract_entity.rs:83:12
   |
65 | impl AbstractRDataEntity {
   | ------------------------ methods in this implementation
...
83 |     pub fn full_path(&self) -> String {
   |            ^^^^^^^^^
...
92 |     pub fn increment_version(&mut self) {
   |            ^^^^^^^^^^^^^^^^^
...
98 |     pub fn create_version_snapshot(&self) -> VersionedData {
   |            ^^^^^^^^^^^^^^^^^^^^^^^

warning: multiple associated items are never used
   --> src/entity/admin_user/model.rs:192:12
    |
190 | impl AdminUser {
    | -------------- associated items in this implementation
191 |     /// Create a new admin user
192 |     pub fn new(
    |            ^^^
...
229 |     pub fn set_password(&mut self, password: &str) -> Result<()> {
    |            ^^^^^^^^^^^^
...
273 |     pub fn has_permission(&self, _permission: &str) -> bool {
    |            ^^^^^^^^^^^^^^
...
282 |     pub fn record_login_success(&mut self) {
    |            ^^^^^^^^^^^^^^^^^^^^
...
288 |     pub fn record_login_failure(&mut self) {
    |            ^^^^^^^^^^^^^^^^^^^^
...
296 |     pub fn can_login(&self) -> bool {
    |            ^^^^^^^^^
...
301 |     pub fn full_name(&self) -> String {
    |            ^^^^^^^^^

warning: associated items `new`, `is_valid`, and `update_last_used` are never used
   --> src/entity/admin_user/model.rs:308:12
    |
306 | impl ApiKey {
    | ----------- associated items in this implementation
307 |     /// Create a new API key
308 |     pub fn new(
    |            ^^^
...
355 |     pub fn is_valid(&self) -> bool {
    |            ^^^^^^^^
...
370 |     pub async fn update_last_used(&mut self, pool: &sqlx::PgPool) -> Result<()> {
    |                  ^^^^^^^^^^^^^^^^

warning: methods `find_api_key_for_auth`, `create`, and `get_by_hash` are never used
  --> src/entity/admin_user/repository_trait.rs:12:14
   |
10 | pub trait ApiKeyRepositoryTrait: Send + Sync {
   |           --------------------- methods in this trait
11 |     /// Find an API key by its value, optimized for authentication
12 |     async fn find_api_key_for_auth(&self, api_key: &str) -> Result<Option<(ApiKey, Uuid)>>;
   |              ^^^^^^^^^^^^^^^^^^^^^
...
18 |     async fn create(&self, key: &ApiKey) -> Result<Uuid>;
   |              ^^^^^^
...
30 |     async fn get_by_hash(&self, api_key: &str) -> Result<Option<ApiKey>>;
   |              ^^^^^^^^^^^

warning: methods `find_by_uuid`, `update_admin_user`, `delete_admin_user`, and `list_admin_users` are never used
  --> src/entity/admin_user/repository_trait.rs:56:14
   |
50 | pub trait AdminUserRepositoryTrait: Send + Sync {
   |           ------------------------ methods in this trait
...
56 |     async fn find_by_uuid(&self, uuid: &Uuid) -> Result<Option<AdminUser>>;
   |              ^^^^^^^^^^^^
...
75 |     async fn update_admin_user(&self, user: &AdminUser) -> Result<()>;
   |              ^^^^^^^^^^^^^^^^^
...
78 |     async fn delete_admin_user(&self, uuid: &Uuid) -> Result<()>;
   |              ^^^^^^^^^^^^^^^^^
...
81 |     async fn list_admin_users(&self, limit: i64, offset: i64) -> Result<Vec<AdminUser>>;
   |              ^^^^^^^^^^^^^^^^

warning: associated items `new` and `deserialize` are never used
  --> src/entity/version.rs:24:12
   |
22 | impl VersionedData {
   | ------------------ associated items in this implementation
23 |     /// Create a new versioned data snapshot
24 |     pub fn new(entity_uuid: Uuid, version_number: i32, data: serde_json::Value) -> Self {
   |            ^^^
...
34 |     pub fn deserialize<T>(&self) -> Result<T, serde_json::Error>
   |            ^^^^^^^^^^^

warning: multiple methods are never used
   --> src/entity/class/definition.rs:196:12
    |
150 | impl EntityDefinition {
    | -------------------- methods in this implementation
...
196 |     pub fn get_field(&self, name: &str) -> Option<&FieldDefinition> {
    |            ^^^^^^^^^
...
201 |     pub fn get_fields(&self) -> &Vec<FieldDefinition> {
    |            ^^^^^^^^^^
...
206 |     pub fn add_field(&mut self, field_definition: FieldDefinition) -> Result<()> {
    |            ^^^^^^^^^
...
215 |     pub fn update_field(&mut self, field_definition: FieldDefinition) -> Result<()> {
    |            ^^^^^^^^^^^^
...
231 |     pub fn remove_field(&mut self, name: &str) -> Result<()> {
    |            ^^^^^^^^^^^^
...
447 |     pub fn table_name(&self) -> String {
    |            ^^^^^^^^^^
...
453 |     pub fn generate_sql_schema(&self) -> String {
    |            ^^^^^^^^^^^^^^^^^^^

warning: methods `apply_schema` and `cleanup_unused_entity_tables` are never used
  --> src/entity/class/repository_trait.rs:29:14
   |
9  | pub trait EntityDefinitionRepositoryTrait: Send + Sync {
   |           ------------------------------ methods in this trait
...
29 |     async fn apply_schema(&self, schema_sql: &str) -> Result<()>;
   |              ^^^^^^^^^^^^
...
50 |     async fn cleanup_unused_entity_tables(&self) -> Result<()>;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: associated function `from_value` is never used
  --> src/entity/dynamic_entity/entity.rs:16:8
   |
15 | pub trait FromValue: Sized {
   |           --------- associated function in this trait
16 |     fn from_value(value: &JsonValue) -> Result<Self>;
   |        ^^^^^^^^^^

warning: method `to_value` is never used
  --> src/entity/dynamic_entity/entity.rs:20:8
   |
19 | pub trait ToValue {
   |           ------- method in this trait
20 |     fn to_value(&self) -> Result<JsonValue>;
   |        ^^^^^^^^

warning: field `definition` is never read
   --> src/entity/dynamic_entity/entity.rs:125:9
    |
116 | pub struct DynamicEntity {
    |            ------------- field in this struct
...
125 |     pub definition: Arc<EntityDefinition>,
    |         ^^^^^^^^^^
    |
    = note: `DynamicEntity` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: multiple associated items are never used
   --> src/entity/dynamic_entity/entity.rs:130:12
    |
128 | impl DynamicEntity {
    | ------------------ associated items in this implementation
129 |     /// Create a new dynamic entity
130 |     pub fn new(entity_type: String, definition: Arc<EntityDefinition>) -> Self {
    |            ^^^
...
174 |     pub fn get<T: FromValue>(&self, field: &str) -> Result<T> {
    |            ^^^
...
183 |     pub fn set<T: ToValue>(&mut self, field: &str, value: T) -> Result<()> {
    |            ^^^
...
220 |     pub fn validate(&self) -> Result<()> {
    |            ^^^^^^^^
...
242 |     pub fn increment_version(&mut self) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^^
...
255 |     pub fn get_field_definition(&self, field: &str) -> Option<&FieldDefinition> {
    |            ^^^^^^^^^^^^^^^^^^^^
...
260 |     pub fn get_field_names(&self) -> Vec<String> {
    |            ^^^^^^^^^^^^^^^

warning: associated items `new`, `get_sql_type`, and `handle_constraint` are never used
   --> src/entity/field/definition.rs:168:12
    |
166 | impl FieldDefinition {
    | -------------------- associated items in this implementation
167 |     /// Create a new field definition with default values
168 |     pub fn new(name: String, display_name: String, field_type: FieldType) -> Self {
    |            ^^^
...
491 |     pub fn get_sql_type(&self) -> String {
    |            ^^^^^^^^^^^^
...
541 |     fn handle_constraint(&self, constraint_type: &str, constraint_value: &Value) -> Result<()> {
    |        ^^^^^^^^^^^^^^^^^

warning: method `is_relation` is never used
  --> src/entity/field/types.rs:44:12
   |
42 | impl FieldType {
   | -------------- method in this implementation
43 |     /// Check if this field type is a relation
44 |     pub fn is_relation(&self) -> bool {
   |            ^^^^^^^^^^^

warning: function `is_valid_field_type` is never used
   --> src/entity/field/types.rs:114:8
    |
114 | pub fn is_valid_field_type(field_type: &str) -> bool {
    |        ^^^^^^^^^^^^^^^^^^^

warning: method `into_db_error` is never used
   --> src/error.rs:101:8
    |
100 | pub trait SqlxErrorExt: Sized {
    |           ------------ method in this trait
101 |     fn into_db_error(self) -> std::result::Result<sqlx::Error, Self>;
    |        ^^^^^^^^^^^^^

warning: trait `NotificationManager` is never used
  --> src/notification/mod.rs:92:11
   |
92 | pub trait NotificationManager {
   |           ^^^^^^^^^^^^^^^^^^^

warning: trait `VersionManager` is never used
  --> src/versioning/mod.rs:27:11
   |
27 | pub trait VersionManager {
   |           ^^^^^^^^^^^^^^

warning: trait `WorkflowManager` is never used
   --> src/workflow/mod.rs:101:11
    |
101 | pub trait WorkflowManager {
    |           ^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
  --> src/bin/test_schema_update.rs:62:9
   |
62 |     let mut test_class = EntityDefinition {
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/bin/test_schema_update.rs:121:9
    |
121 |     let mut updated_class = repo.get_by_uuid(&test_class.uuid).await?;
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused import: `error`
 --> src/bin/test_dynamic_entity.rs:2:11
  |
2 | use log::{error, info};
  |           ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `uuid::timestamp`
 --> src/bin/test_dynamic_entity.rs:6:5
  |
6 | use uuid::timestamp;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `ContextV7`
 --> src/bin/test_dynamic_entity.rs:7:12
  |
7 | use uuid::{ContextV7, Uuid};
  |            ^^^^^^^^^

warning: unused variable: `entity`
  --> src/bin/test_dynamic_entity.rs:36:28
   |
36 |     async fn create(&self, entity: &DynamicEntity) -> Result<Uuid> {
   |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `uuid`
  --> src/bin/test_dynamic_entity.rs:41:25
   |
41 |     async fn get(&self, uuid: Uuid) -> Result<DynamicEntity> {
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_uuid`

warning: unused variable: `entity`
  --> src/bin/test_dynamic_entity.rs:53:28
   |
53 |     async fn update(&self, entity: &DynamicEntity) -> Result<()> {
   |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: field `pool` is never read
  --> src/bin/test_dynamic_entity.rs:18:5
   |
17 | struct DynamicEntityRepository {
   |        ----------------------- field in this struct
18 |     pool: sqlx::PgPool,
   |     ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `r_data_core` (bin "r_data_core") generated 89 warnings (33 duplicates) (run `cargo fix --bin "r_data_core"` to apply 13 suggestions)
warning: `r_data_core` (bin "test_schema_update") generated 2 warnings (run `cargo fix --bin "test_schema_update"` to apply 2 suggestions)
warning: `r_data_core` (bin "test_dynamic_entity") generated 7 warnings (run `cargo fix --bin "test_dynamic_entity"` to apply 3 suggestions)
warning: unused import: `AdminUser`
 --> tests/repositories/admin_user_repository_tests.rs:3:26
  |
3 |     entity::admin_user::{AdminUser, AdminUserRepository, AdminUserRepositoryTrait},
  |                          ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ApiKey`
 --> tests/integration/api_key_service_tests.rs:2:26
  |
2 |     entity::admin_user::{ApiKey, ApiKeyRepository},
  |                          ^^^^^^

warning: `r_data_core` (bin "r_data_core" test) generated 89 warnings (89 duplicates)
warning: `r_data_core` (test "mod") generated 2 warnings (run `cargo fix --test "mod"` to apply 2 suggestions)
warning: `r_data_core` (bin "test_schema_update" test) generated 2 warnings (2 duplicates)
warning: `r_data_core` (bin "test_dynamic_entity" test) generated 7 warnings (7 duplicates)
warning: unused import: `eq`
   --> src/services/entity_definition_service.rs:183:36
    |
183 |     use mockall::predicate::{self, eq};
    |                                    ^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `now`
   --> src/services/entity_definition_service.rs:208:13
    |
208 |         let now = OffsetDateTime::now_utc();
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_now`

warning: `r_data_core` (lib test) generated 37 warnings (35 duplicates) (run `cargo fix --lib -p r_data_core --tests` to apply 1 suggestion)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.18s
     Running unittests src/lib.rs (target/debug/deps/r_data_core-a57ce539d78fb100)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 17 filtered out; finished in 0.00s

     Running unittests src/bin/apply_schema.rs (target/debug/deps/apply_schema-2006cff3d24add9c)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/check_columns.rs (target/debug/deps/check_columns-024930adfbb4f761)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/check_table.rs (target/debug/deps/check_table-cbf2f92e68196a16)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/debug_schema.rs (target/debug/deps/debug_schema-ca81f841adb8bf04)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/hash_password.rs (target/debug/deps/hash_password-329f246514d56fab)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/main.rs (target/debug/deps/r_data_core-4518c41a13f17441)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/run_migrations.rs (target/debug/deps/run_migrations-89081d3333820ce2)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/test_dynamic_entity.rs (target/debug/deps/test_dynamic_entity-b839cc698dfdacd6)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/test_field_rename.rs (target/debug/deps/test_field_rename-51b301914f88fd81)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/test_schema_update.rs (target/debug/deps/test_schema_update-091f2f1ed58fe091)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/mod.rs (target/debug/deps/mod-ebdfc06b6f282476)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 27 filtered out; finished in 0.00s

   Doc-tests r_data_core

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

